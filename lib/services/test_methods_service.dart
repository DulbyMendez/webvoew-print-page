import 'package:flutter/material.dart';
import 'printer_service.dart';

/// Service for handling basic printer test methods.
class TestMethodsService {
  final PrinterService _printerService;
  final BuildContext _context;

  TestMethodsService(this._printerService, this._context);

  /// Tests the connection to the printer.
  Future<void> testConnection() async {
    _showSnackBar('üîç Probando conexi√≥n con impresora...', Colors.blue);

    final bool isConnected = await _printerService.testConnection();

    _showSnackBar(
      isConnected
          ? '‚úÖ Conexi√≥n exitosa con la impresora'
          : '‚ùå No se puede conectar a la impresora',
      isConnected ? Colors.green : Colors.red,
    );
  }

  /// Tests Latin1 printing with Spanish characters.
  Future<void> testLatin1Print() async {
    _showSnackBar('üñ®Ô∏è Probando impresi√≥n Latin1...', Colors.blue);

    try {
      await _printerService.printLatin1(
        '¬°Hola mundo con acentos y e√±es!\nPrueba de impresi√≥n con CP1252 (Latin1).\nDeber√≠a funcionar correctamente. ü§ì\nFecha: ${DateTime.now().toString()}',
        'Prueba Latin1',
        PrinterService.printerIP,
      );
      _showSnackBar('‚úÖ Impresi√≥n Latin1 exitosa', Colors.green);
    } catch (e) {
      _showSnackBar('‚ùå Error en impresi√≥n Latin1: $e', Colors.red);
    }
  }

  /// Tests quick printing with Spanish optimization (CP1252).
  Future<void> testQuickPrint() async {
    _showSnackBar('‚ö° Impresi√≥n r√°pida en espa√±ol...', Colors.blue);

    try {
      await _printerService.printSpanish(
        '¬°Impresi√≥n r√°pida!\nCaracteres espa√±oles: √°√©√≠√≥√∫ √±√ë √º√ú ¬ø¬°\nFecha: ${DateTime.now().toString()}',
        'Prueba R√°pida',
        PrinterService.printerIP,
      );
      _showSnackBar('‚úÖ Impresi√≥n r√°pida exitosa', Colors.green);
    } catch (e) {
      _showSnackBar('‚ùå Error en impresi√≥n r√°pida: $e', Colors.red);
    }
  }

  /// Tests printing with custom configuration.
  Future<void> testCustomConfiguration({
    required String codeTable,
    required bool normalizeChars,
    required bool fullNormalization,
  }) async {
    _showSnackBar('üß™ Probando configuraci√≥n: $codeTable', Colors.blue);

    try {
      // Log the configuration for debugging
      print(
        'Prueba con: $codeTable, Normalizar: $normalizeChars, Completo: $fullNormalization',
      );

      // Use the appropriate print method based on configuration
      if (fullNormalization) {
        await _printerService.printSimple(
          'Prueba de configuraci√≥n personalizada\nCaracteres: √°√©√≠√≥√∫ √±√ë √º√ú ¬ø¬°\nConfiguraci√≥n: $codeTable (normalizaci√≥n completa)',
          'Prueba Configuraci√≥n',
          PrinterService.printerIP,
        );
      } else if (codeTable == 'CP1252') {
        await _printerService.printSpanish(
          'Prueba de configuraci√≥n personalizada\nCaracteres: √°√©√≠√≥√∫ √±√ë √º√ú ¬ø¬°\nConfiguraci√≥n: $codeTable',
          'Prueba Configuraci√≥n',
          PrinterService.printerIP,
        );
      } else {
        await _printerService.printLatin1(
          'Prueba de configuraci√≥n personalizada\nCaracteres: √°√©√≠√≥√∫ √±√ë √º√ú ¬ø¬°\nConfiguraci√≥n: $codeTable',
          'Prueba Configuraci√≥n',
          PrinterService.printerIP,
        );
      }

      _showSnackBar(
        '‚úÖ Configuraci√≥n $codeTable probada exitosamente',
        Colors.green,
      );
    } catch (e) {
      _showSnackBar('‚ùå Error probando configuraci√≥n: $e', Colors.red);
    }
  }

  /// Shows a snackbar with the given message and color.
  void _showSnackBar(
    String message,
    Color backgroundColor, {
    Duration? duration,
  }) {
    ScaffoldMessenger.of(_context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: backgroundColor,
        duration: duration ?? const Duration(seconds: 3),
      ),
    );
  }
}
