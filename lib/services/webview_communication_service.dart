import 'package:webview_flutter/webview_flutter.dart';
import 'javascript_injection_service.dart';

/// Service for handling communication with the WebView.
class WebViewCommunicationService {
  final WebViewController _controller;

  WebViewCommunicationService(this._controller);

  /// Injects the simplified print function script into the WebView.
  Future<void> injectPrintInterceptor() async {
    try {
      final script = JavaScriptInjectionService.getPrintInterceptorScript();
      await _controller.runJavaScript(script);
      print('‚úÖ Script de funci√≥n de impresi√≥n simplificado inyectado');
    } catch (e) {
      print('‚ùå Error inyectando script de impresi√≥n: $e');
    }
  }

  /// Notifies the web page about a successful print job.
  Future<void> notifyPrintHistory(String text) async {
    try {
      // First check if the addPrintHistory function exists
      final hasAddPrintHistory = await _checkAddPrintHistoryFunction();

      if (hasAddPrintHistory) {
        // Use the existing function
        final script = JavaScriptInjectionService.getAddPrintHistoryScript(
          text,
        );
        await _controller.runJavaScriptReturningResult(script);
        print('‚úÖ Historial actualizado usando funci√≥n existente');
      } else {
        // Create history manually
        await _createManualPrintHistory(text);
      }
    } catch (e) {
      print('‚ùå Error notificando historial a la web: $e');
    }
  }

  /// Checks if the addPrintHistory function exists in the web page.
  Future<bool> _checkAddPrintHistoryFunction() async {
    try {
      final script = JavaScriptInjectionService.getCheckAddPrintHistoryScript();
      final result = await _controller.runJavaScriptReturningResult(script);
      return result == true;
    } catch (e) {
      print('‚ùå Error verificando funci√≥n addPrintHistory: $e');
      return false;
    }
  }

  /// Creates print history manually in the web page.
  Future<void> _createManualPrintHistory(String text) async {
    try {
      final script =
          JavaScriptInjectionService.getCreateManualPrintHistoryScript(text);
      await _controller.runJavaScript(script);
      print('‚úÖ Historial creado manualmente');
    } catch (e) {
      print('‚ùå Error creando historial manualmente: $e');
    }
  }

  /// Clears the textarea in the web page.
  Future<void> clearTextarea() async {
    try {
      final script = JavaScriptInjectionService.getClearTextareaScript();
      final result = await _controller.runJavaScriptReturningResult(script);
      if (result == true) {
        print('‚úÖ Textarea limpiado exitosamente');
      } else {
        print('‚ö†Ô∏è No se encontr√≥ textarea para limpiar');
      }
    } catch (e) {
      print('‚ùå Error al limpiar el textarea: $e');
    }
  }

  /// Executes custom JavaScript in the WebView.
  Future<dynamic> executeJavaScript(String script) async {
    try {
      return await _controller.runJavaScriptReturningResult(script);
    } catch (e) {
      print('‚ùå Error ejecutando JavaScript: $e');
      return null;
    }
  }

  /// Gets the current URL of the WebView.
  Future<String?> getCurrentUrl() async {
    try {
      return await _controller.currentUrl();
    } catch (e) {
      print('‚ùå Error obteniendo URL actual: $e');
      return null;
    }
  }

  /// Tests the print function with sample data.
  Future<void> testPrintFunction() async {
    try {
      final script = JavaScriptInjectionService.getTestPrintFunctionScript();
      final result = await _controller.runJavaScriptReturningResult(script);
      print('üß™ Resultado de prueba de funci√≥n de impresi√≥n: $result');
    } catch (e) {
      print('‚ùå Error en prueba de funci√≥n de impresi√≥n: $e');
    }
  }

  /// Gets usage information for the print function.
  Future<void> getFunctionUsage() async {
    try {
      final script = JavaScriptInjectionService.getFunctionUsageScript();
      final result = await _controller.runJavaScriptReturningResult(script);
      print('üìñ Informaci√≥n de uso de funci√≥n de impresi√≥n: $result');
    } catch (e) {
      print('‚ùå Error obteniendo informaci√≥n de uso: $e');
    }
  }

  /// Reloads the WebView.
  Future<void> reload() async {
    try {
      await _controller.reload();
      print('‚úÖ WebView recargado');
    } catch (e) {
      print('‚ùå Error recargando WebView: $e');
    }
  }

  /// Sends current print configuration to the web page.
  Future<void> sendPrintConfiguration({
    required String codeTable,
    required bool normalizeCharacters,
    required bool fullNormalization,
  }) async {
    try {
      final script = '''
        (function() {
          // Enviar configuraci√≥n de impresi√≥n a la web
          if (typeof window.setPrintConfiguration === 'function') {
            window.setPrintConfiguration({
              codeTable: '$codeTable',
              normalizeCharacters: $normalizeCharacters,
              fullNormalization: $fullNormalization,
              platform: 'flutter',
              timestamp: new Date().toISOString()
            });
            console.log('‚úÖ Configuraci√≥n de impresi√≥n enviada a la web:', {
              codeTable: '$codeTable',
              normalizeCharacters: $normalizeCharacters,
              fullNormalization: $fullNormalization
            });
            return true;
          } else {
            // Si no existe la funci√≥n, crear variables globales
            window.flutterPrintConfig = {
              codeTable: '$codeTable',
              normalizeCharacters: $normalizeCharacters,
              fullNormalization: $fullNormalization,
              platform: 'flutter',
              timestamp: new Date().toISOString()
            };
            console.log('‚úÖ Configuraci√≥n de impresi√≥n guardada en variables globales');
            return true;
          }
        })();
      ''';

      final result = await _controller.runJavaScriptReturningResult(script);
      print('üìã Configuraci√≥n enviada a la web: $result');
    } catch (e) {
      print('‚ùå Error enviando configuraci√≥n: $e');
    }
  }

  /// Sends a test print request to the WebView.
  Future<void> sendTestPrintRequest() async {
    try {
      final script = '''
        (function() {
          console.log('üß™ ENVIANDO SOLICITUD DE IMPRESI√ìN DE PRUEBA');
          
          const testData = {
            content: "Este es un texto de prueba para verificar que la funci√≥n de impresi√≥n funciona correctamente. Incluye caracteres especiales: √°, √©, √≠, √≥, √∫, √±, ¬ø, ¬°",
            title: "Prueba de Impresi√≥n desde Flutter",
            printers: [
              { ip: "192.168.1.100", copies: 1 },
              { ip: "192.168.1.101", copies: 2 }
            ]
          };
          
          console.log('üìã Datos de prueba:', testData);
          
          if (typeof callDirectPrint === 'function') {
            callDirectPrint(testData);
            return 'Solicitud de impresi√≥n de prueba enviada';
          } else if (typeof window.NativePrinter !== 'undefined') {
            window.NativePrinter.postMessage(JSON.stringify(testData));
            return 'Solicitud de impresi√≥n de prueba enviada via NativePrinter';
          } else {
            return 'Error: No se encontr√≥ funci√≥n de impresi√≥n disponible';
          }
        })();
      ''';

      final result = await _controller.runJavaScriptReturningResult(script);
      print('üß™ Resultado de solicitud de prueba: $result');
    } catch (e) {
      print('‚ùå Error enviando solicitud de prueba: $e');
    }
  }
}
